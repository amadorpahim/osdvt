#!/usr/bin/python
#
# This program is a VDI solution using the SPICE Protocol
# Copyright (C) 2011  Universidade de Caxias do Sul
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# long with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import re
import MySQLdb
import sys
import os
import socket
import ldap
import ssl
import ldap
import random
import commands                
import time
import signal
import fcntl
import syslog
import subprocess
import logging
from ConfigParser import ConfigParser
from threading import Thread


# Config file
filename = '/usr/local/osdvt/server/config/osdvt.conf'
config = ConfigParser()
config.read([filename])

# Config Main
version 		= config.get('Main','Version')
port 			= int(config.get('Main','Port') )
video_end_port		= int(config.get('Main','VideoEndPort'))
mac_oui			= config.get('Main','MAC_OUI')
root_dir 		= config.get('Main','MainDir')
log 			= config.get('Main','Log')

if port < 1024 or port > 65535:
	print "OSDVT Config error: Invalid Port. Valid values are from 1024 to 65535."
	sys.exit(1)
	
if video_end_port < 5901 or video_end_port > 65535:
	print "OSDVT Config error: Invalid VideoEndPort. Valid values are from 5901 to 65535."
	sys.exit(1)
	
if not re.match("[0-9a-f]{2}([:][0-9a-f]{2}){2}$", mac_oui.lower()):
	print "OSDVT Config error: Invalid MAC_OUI. Valid values are from 00:00:00 to FF:FF:FF."
	sys.exit(1)

if not os.path.isdir(root_dir):
	print "OSDVT Config error: Invalid MainDir. Please inform right OSDVT path."
	sys.exit(1)

if not os.path.isfile(root_dir+"/config/ich9-ehci-uhci.cfg"):
	print "OSDVT Config error: ich9-ehci-uhci.cfg config file not found."
	sys.exit(1)

if not os.path.isfile(root_dir+"/log/osdvt-server.log"):
	print "OSDVT Config error: osdvt-server.log file not found. Please create it ("+root_dir+"/log/osdvt-server.log)."
        sys.exit(1)

if not os.path.isfile(root_dir+"/scripts/qemu-ifup.sh"):
	print "OSDVT Config error: qemu-ifup.sh script not found."
	sys.exit(1)

if not os.path.isdir(root_dir+"/socket"):
	print "OSDVT Config error: socket dir not found. Please create it ("+root_dir+"/socket/)."
	sys.exit(1)

if log != "debug" and log != "info":
        print "OSDVT Config error: Invalid Log. Valid values are debug or info."
        sys.exit(1)
	

# Config Database
dbhost = config.get('Database','DBHost')
dbname = config.get('Database','DBName')
dbuser = config.get('Database','DBUser')
dbpass = config.get('Database','DBPassword')

# Config SSL
certfile = config.get('SSL','CertFile')
keyfile = config.get('SSL','KeyFile')
sslversion = config.get('SSL','Version')

if not os.path.isfile(certfile):
	print "OSDVT Config error: CertFile not found."
	sys.exit(1)

if not os.path.isfile(keyfile):
	print "OSDVT Config error: Key not found."
	sys.exit(1)

if sslversion != "SSLv1" and sslversion != "SSLv2" and sslversion != "SSLv23" and sslversion != "TLSv1":
        print "OSDVT Config error: Invalid SSL Version. Valid values are SSLv1, SSLv2, SSLv23 or TLSv1."
        sys.exit(1)
	

# Config LDAP
LDAPEnabled = config.get('LDAP','Enabled')
ldaphost = "ldap://"+config.get('LDAP','Host')
baseDN = config.get('LDAP','BaseDN')
LdapFilter = config.get('LDAP','Filter')

if LDAPEnabled != "True" and LDAPEnabled != "False":
        print "OSDVT Config error: Invalid LDAPEnabled. Valid values are True or False."
        sys.exit(1)
	
# LOG configuration
if log == "debug":
	logging.basicConfig(filename=root_dir+'/log/osdvt-server.log', level=logging.DEBUG)
else:
	logging.basicConfig(filename=root_dir+'/log/osdvt-server.log', level=logging.INFO)


# Finding KVM binary. RHEL6 puts in "libexec" without $PATH.
if os.path.exists('/usr/bin/qemu-kvm'):
	KVM="/usr/bin/qemu-kvm"
elif os.path.exists('/usr/libexec/qemu-kvm'):
	KVM="/usr/libexec/qemu-kvm"
else:
	logging.info("OSDVT: qemu-kvm not found. Maybe, you've to install it.")
	signal.signal(signal.SIGTERM, minhas_vms.sigterm_handler, Socket)
	signal.signal(signal.SIGINT, minhas_vms.sigint_handler, Socket)

#syslog.syslog("OSDVT: using "+KVM)
logging.debug("OSDVT %s is running. Using %s." % (version, KVM))

class Vms:
	def sigint_handler(self, signal, frame, Socket):
        	self._VarSaida=False
        	sys.exit()

	def sigterm_handler(self, signal, frame, Socket):
        	self._VarSaida=False
        	sys.exit()

	def Monitor(self):
                while self._VarSaida:
			time.sleep(1)
                        for i in commands.getoutput('ls %s/socket' % (root_dir)).split('\n'):
        			if i:                  
                			if os.system('ps -p $(cat %s/socket/%s) -o comm= > /dev/null 2> /dev/null' % (root_dir,i)) != 0:
						logging.debug("Monitor: VM PID %s powered off. Removing PID file." % (i))
                        			os.system('rm -rf %s/socket/%s' % (root_dir,i))

	def AuthToken(self, dbhost, dbname, dbuser, dbpass, user, token):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		sql = "select * from osdvtadmin_user where Name = '%s' and Token = '%s'" % (user,token) 
		try:
			cursor.execute(sql)
		except:
			cursor.close ()
			con.close ()
			logging.exception("AuthToken Error.")
			return "ERR"

		con.commit() 
		cursor.close ()
		con.close ()

		#logging.debug("AuthToken: User/token OK.")
		return "OK"


	def AuthTokenIp(self, dbhost, dbname, dbuser, dbpass, ip, token):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		sql = "select * from osdvtadmin_ip where IP = '%s' and Token = '%s'" % (ip,token)
		try:
			cursor.execute(sql)
		except:
			cursor.close ()
			con.close ()
			logging.exception("AuthTokenIp Error.")
			return "ERR"

		con.commit() 
		cursor.close ()
		con.close ()

		#logging.debug("AuthTokenIp: IP/token OK.")
		return "OK"

	def SetTokenAuth(self, dbhost, dbname, dbuser, dbpass, user):
		con = MySQLdb.connect(dbhost, dbuser, dbpass)
                con.select_db(dbname)
                cursor = con.cursor()
		token = hex(random.getrandbits(64))[2:-1]
                sql = "update osdvtadmin_user set Token = '%s' where Name = '%s'" % (token,user)
		try:
			cursor.execute(sql)
		except:
			cursor.close ()
			con.close ()
			logging.exception("SetTokenIp Error.")
			return "ERR"

		con.commit() 
		cursor.close ()
		con.close ()

		logging.debug("SetTokenAuth: token OK - %s" % (token))
		return str(token)

	def SetTokenAuthIp(self, dbhost, dbname, dbuser, dbpass, ip):
		con = MySQLdb.connect(dbhost, dbuser, dbpass)
                con.select_db(dbname)
                cursor = con.cursor()
		token = hex(random.getrandbits(64))[2:-1]
                sql = "update osdvtadmin_ip set Token = '%s' where IP = '%s'" % (token,ip) 
		try:
			cursor.execute(sql)
		except:
			cursor.close ()
			con.close ()
			logging.exception("SetTokenAuthIp Error.")
			return "ERR"

		con.commit() 
		cursor.close ()
		con.close ()

		logging.debug("SetTokenAuthIp: IP token OK - %s" % (token))
		return str(token)

	def Auth(self, ldaphost, user, password, baseDN):
		l = ldap.initialize(ldaphost)
		searchScope = ldap.SCOPE_SUBTREE
		retrieveAttributes = ['dn']
		searchFilter = LdapFilter + "=" + user
		if LDAPEnabled == "True":
			try:
				dn = l.search_s(baseDN, searchScope, searchFilter, retrieveAttributes)[0][0]
				logging.debug("Authenticating user. LDAP: %s" % ldaphost)
				logging.debug("Authenticating user. USER: %s" % user)
				logging.debug("Authenticating user. baseDN: %s" % baseDN)
			except:
				logging.exception("Auth: LDAP Error - %s" % ldaphost)
				return "ERR: Invalid credentials"
	
			try:
				l.simple_bind_s(dn,password)
			except ldap.INVALID_CREDENTIALS:
				logging.exception("Auth: LDAP Error - %s invalid credentials" % user)
				return "ERR: Invalid credentials"
		
		logging.debug("Auth: User %s authenticated." % user)
		return "OK: Auth successful"

	def Kill(self, dbhost, dbname, dbuser, dbpass, vmname):
		if minhas_vms.Status(dbhost, dbname, dbuser, dbpass, vmname):
			con = MySQLdb.connect(dbhost, dbuser, dbpass) 
			con.select_db(dbname)
			cursor = con.cursor() 
			cursor.execute("SELECT osdvtadmin_vm.Name FROM osdvtadmin_vm WHERE Name = '%s'" % (vmname))
			rs = cursor.fetchall()
			cursor.close ()
			con.close ()
			if rs:
				pidfile = "%s/socket/%s.pid" % (root_dir,rs[0][0])
				cmnd = "kill $(cat %s)" % (pidfile)

				if os.system(cmnd) == 0:
					logging.debug("Kill: VM %s killed." % (vmname))
	                        	return "OK: Killed"
	                       	else:  
					logging.debug("Kill: Error killing VM %s." % (vmname))
	                        	return "ERR: Can not kill VM"

	def Status(self, dbhost, dbname, dbuser, dbpass, vmname):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		cursor.execute("SELECT osdvtadmin_vm.Name,osdvtadmin_vm.Core,osdvtadmin_vm.Socket,osdvtadmin_vm.Memory,osdvtadmin_vm.Video,osdvtadmin_vm.Bits,osdvtadmin_osvariant.OsType,osdvtadmin_vm.StartedVideo FROM osdvtadmin_vm,osdvtadmin_osvariant WHERE osdvtadmin_vm.OsVariant_id = osdvtadmin_osvariant.id and  Name = '%s'" % (vmname))
		rs = cursor.fetchall()
		cursor.close ()
		con.close ()
		if rs:
			pidfile = "%s/socket/%s.pid" % (root_dir,rs[0][0])
			Smp = int(rs[0][1])*int(rs[0][2])
			Mem = rs[0][3]
			Bits = rs[0][5]
			Os = rs[0][6]

			if os.path.isfile(pidfile):

				if rs[0][7] == '0':
					Video = 'SPICE'
				elif rs[0][7] == '1':
					Video = 'VNC'

				return "True",Smp,Mem,Video,Bits,Os 
			else:

				if rs[0][4] == '0':
					Video = 'SPICE'
				elif rs[0][4] == '1':
					Video = 'VNC'

				return "False",Smp,Mem,Video,Bits,Os

	def StatusIp(self, dbhost, dbname, dbuser, dbpass, vmname):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		cursor.execute("SELECT osdvtadmin_vm.Name FROM osdvtadmin_vm WHERE Name = '%s'" % (vmname))
		rs = cursor.fetchall()
		cursor.close ()
		con.close ()
		if rs:
			pidfile = "%s/socket/%s.pid" % (root_dir,rs[0][0])

			if os.path.isfile(pidfile):
				return "True" 
			else:
				return "False"

	def Connect(self, dbhost, dbname, dbuser, dbpass, vmname):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		cursor.execute("select osdvtadmin_vm.VideoPort,osdvtadmin_vm.VideoToken,osdvtadmin_vm.StartedVideo from osdvtadmin_vm where osdvtadmin_vm.Name = '%s'" % (vmname))
		rs = cursor.fetchall()
		cursor.close ()
		con.close ()

		logging.debug("Connect: VideoPort %s, VideoToken %s, VideoType %s." % (rs[0][0],rs[0][1],rs[0][2]))
		return rs

	def Search(self, dbhost, dbname, dbuser, dbpass, user):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		cursor.execute("SELECT osdvtadmin_vm.Name FROM osdvtadmin_vm_Users, osdvtadmin_vm, osdvtadmin_user WHERE osdvtadmin_vm.id = osdvtadmin_vm_Users.vm_id and osdvtadmin_user.id = osdvtadmin_vm_Users.user_id and osdvtadmin_user.Name = '%s'" % (user))
		rs = cursor.fetchall()
		cursor.close ()
		con.close ()
		listavms = "" 
		for i in range(rs.__len__()):
			listavms = "%s %s" % (rs[i][0],listavms)

		logging.debug("Search: %s" % (listavms))
		return listavms

	def SearchIp(self, dbhost, dbname, dbuser, dbpass, ip):
		con = MySQLdb.connect(dbhost, dbuser, dbpass) 
		con.select_db(dbname)
		cursor = con.cursor() 
		cursor.execute("SELECT osdvtadmin_vm.Name FROM osdvtadmin_vm_Ips, osdvtadmin_vm, osdvtadmin_ip WHERE osdvtadmin_vm.id = osdvtadmin_vm_Ips.vm_id and osdvtadmin_ip.id = osdvtadmin_vm_Ips.ip_id and osdvtadmin_ip.IP = '%s'" % (ip))
		rs = cursor.fetchall()
		cursor.close ()
		con.close ()
		listavms = "" 
		for i in range(rs.__len__()):
			listavms = "%s %s" % (rs[i][0],listavms)

		logging.debug("Search: %s" % (listavms))
		return listavms
	
	def Start(self, dbhost, dbname, dbuser, dbpass, vmname, video_end_port, mac_oui):
		def AddQemuArgs(key, value):
			qemuargs.append("-%s" % (key))
			if value:	
				qemuargs.append(value)

		def GetMac(vmname, mac_oiu):

			con = MySQLdb.connect(dbhost, dbuser, dbpass)
	                con.select_db(dbname)
	                cursor = con.cursor()

			cursor.execute("SELECT osdvtadmin_vm.MAC FROM osdvtadmin_vm WHERE osdvtadmin_vm.Name = '%s'" % (vmname))
	                rs = cursor.fetchall()

			if rs[0][0] == "":
				logging.debug("MAC not found. Generating a new one...")
				mac_nic = [ random.randint(0x00, 0x7f), random.randint(0x00, 0xff), random.randint(0x00, 0xff) ]
				mac_address = mac_oui+':'+':'.join(map(lambda x: "%02x" % x, mac_nic))
				
				cursor.execute("SELECT osdvtadmin_vm.MAC FROM osdvtadmin_vm")
				rs_macs = cursor.fetchall()

				for i in range(rs_macs.__len__()):
					if rs_macs[i][0] == mac_address:
						logging.debug("MAC colision! Generating a new one...")
						GetMac(vmname, mac_oiu)

				sql = "update osdvtadmin_vm set MAC = '%s' where Name = '%s'" % (mac_address,vmname)
				try:
					logging.debug("New MAC: %s" % (mac_address))
					cursor.execute(sql)
				except:
					logging.exception("Error inserting MAC address in database.")
					cursor.close ()
					con.close ()
					return "ERR"
			else:
				mac_address = rs[0][0]
				logging.debug("MAC found: %s" % (mac_address))
	
			con.commit() 
			cursor.close ()

			return mac_address

		def GetVideoPort(video_end_port):
			video_start_port = 5900
			findport = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			video_port = video_start_port

			while video_port <= video_end_port:
				try:   
					findport.bind(('localhost', video_port))
				except socket.error as e:
					if e.errno == 98:
						if video_port == video_end_port:
							return "ERR",""
						else:  
							video_port = video_port+1
					else:  
						raise
				else:  
					break

                	video_token = hex(random.getrandbits(64))[2:-1]

			con = MySQLdb.connect(dbhost, dbuser, dbpass)
	                con.select_db(dbname)
	                cursor = con.cursor()
	                sql_video_port = "update osdvtadmin_vm set VideoPort = '%s' where Name = '%s'" % (video_port,vmname) 
	                sql_video_token = "update osdvtadmin_vm set VideoToken= '%s' where Name = '%s'" % (video_token,vmname) 
			try:
				cursor.execute(sql_video_port)
				cursor.execute(sql_video_token)
			except:
				logging.exception("Error inserting VideoPort/VideoToken in database.")
				cursor.close ()
				con.close ()
				return "ERR",""
	
			con.commit() 
			cursor.close ()

			findport.close()
			return video_port,video_token

		if minhas_vms.Status(dbhost, dbname, dbuser, dbpass, vmname):
			con = MySQLdb.connect(dbhost, dbuser, dbpass) 
			con.select_db(dbname)
			cursor = con.cursor() 
			cursor.execute("select osdvtadmin_vm.*,osdvtadmin_osvariant.OsType from osdvtadmin_vm,osdvtadmin_osvariant where osdvtadmin_vm.OsVariant_id = osdvtadmin_osvariant.Id and osdvtadmin_vm.Name = '%s'" % (vmname)) 
			rs = cursor.fetchall()

			if rs:
				StartId 		= rs[0][0]
				StartName 		= rs[0][1]
				StartDescription 	= rs[0][2]
				StartCore 		= rs[0][3]
				StartSocket 		= rs[0][4]
				StartMemory 		= rs[0][5]
				StartImmutable 		= rs[0][6]
				StartUsbRedirect 	= rs[0][7]
				StartMac 		= rs[0][8]
				StartBridge 		= rs[0][9] 
				StartVideo 		= rs[0][10] 
				StartOsVariant 		= rs[0][11] 
				StartBits 		= rs[0][12] 
				StartOs 		= rs[0][13] 

				qemuargs		= []

				AddQemuArgs("M"		, "pc")
				AddQemuArgs("device"	, "virtio-balloon-pci,id=balloon0,bus=pci.0")
				AddQemuArgs("name"	, StartName)
				AddQemuArgs("m"		, StartMemory)
				AddQemuArgs("monitor"	, "null")
				AddQemuArgs("localtime"	, "")
				AddQemuArgs("daemonize"	, "")
				AddQemuArgs("pidfile"	, "%s/socket/%s.pid" % (root_dir,StartName))

				# Seeting system architecture.
				if StartBits == "64":
					AddQemuArgs("cpu"	, "qemu64")
				else:
					AddQemuArgs("cpu"       , "qemu32")

				# Calculating number of processors.
				Smp = int(StartCore)*int(StartSocket)
				AddQemuArgs("smp"	, "%s,sockets=%s,cores=%s,threads=1" % (Smp,StartSocket,StartCore))

				# Getting MAC address.
				mac = GetMac(vmname, mac_oui)

				# Setting virtio/vhost net device to Linux hosts.
				if StartOs == "Linux":
					AddQemuArgs("netdev"	, "tap,ifname=tap%s,id=guest0,vhost=on,script=%s/scripts/qemu-ifup.sh,downscript=%s/scripts/qemu-ifdown.sh" % (StartId,root_dir,root_dir))
					AddQemuArgs("net"	, "nic,model=virtio,netdev=guest0,macaddr=%s" % (mac))
				
				# Setting rtl8139 net device to windows hosts.
				else:
					AddQemuArgs("net"	, "nic,macaddr=%s,model=rtl8139" % (mac))
					AddQemuArgs("net"	, "tap,ifname=tap%s,script=%s/scripts/qemu-ifup.sh,downscript=%s/scripts/qemu-ifdown.sh" %(StartId,root_dir,root_dir))

				# Setting immutable mode.
				if StartImmutable == 1:
					AddQemuArgs("snapshot", "")

				# Getting vm disks.
				cursor.execute("select osdvtadmin_vmdisk.Virtio,osdvtadmin_vmdisk.Cdrom,osdvtadmin_vmdisk.boot,osdvtadmin_disk.Path from osdvtadmin_vm, osdvtadmin_disk, osdvtadmin_vmdisk  where osdvtadmin_vm.id= '%s' and osdvtadmin_vm.id = osdvtadmin_vmdisk.Vm_id and osdvtadmin_vmdisk.Disk_id = osdvtadmin_disk.id" % (StartId)) 
				rs = cursor.fetchall()

				# Defining disk properties.
				for i in range(rs.__len__()):
					options = "file="+rs[i][3]
					if rs[i][0] == 1: 
						options = options+",if=virtio"
						if rs[i][2] == 1:
							options = options+",boot=on"
					else:
						if rs[i][1] == 1: 
							options = options+",media=cdrom"
							if rs[i][2] == 1:
								AddQemuArgs("boot", "d")

					AddQemuArgs("drive",options)
				
				# Getting video port and token.
				video_port,video_token = GetVideoPort(video_end_port)
				if video_port == "ERR":
					logging.debug("No free ports. Consider adjusting VideoEndPort configuration.")
					return "ERR: Can not start VM"
				else:
					logging.debug("Free port found: %s" % video_port)
					logging.debug("Random VideoToken: %s" % video_token)
				
				# Setting video mode (SPICE/VNC)
				if StartVideo == "0":
					AddQemuArgs("soundhw"	, "ac97")
					AddQemuArgs("vga", "qxl")
					AddQemuArgs("spice", "port=%(video_port)s,password=%(video_token)s" % {'video_port': video_port, 'video_token': video_token})
					AddQemuArgs("device", "virtio-serial")
					AddQemuArgs("chardev", "spicevmc,id=vdagent,name=vdagent")
					AddQemuArgs("device", "virtserialport,chardev=vdagent,name=com.redhat.spice.0")

				if StartVideo == "1":
					AddQemuArgs("vga", "cirrus")
					AddQemuArgs("vnc", ":%(video_port)s" % {'video_port': video_port%5900})

				# Registering started video mode. 
				con = MySQLdb.connect(dbhost, dbuser, dbpass)
				con.select_db(dbname)
				cursor = con.cursor()
				sql = "update osdvtadmin_vm set StartedVideo = '%s' where Name = '%s'" % (StartVideo,vmname) 
				try:
					cursor.execute(sql)
				except:
					logging.exception("Error inserting StartedVideo in database.")
					cursor.close ()
					con.close ()

				con.commit() 
				cursor.close ()

				# Setting usb_redir parameters.
				if StartUsbRedirect > 0:
					AddQemuArgs("readconfig", "%(root_dir)s/config/ich9-ehci-uhci.cfg" % {'root_dir': root_dir})
					for i in range(StartUsbRedirect):
						AddQemuArgs("chardev", "spicevmc,name=usbredir,id=usbredirchardev%s" % (i))
						AddQemuArgs("device", "usb-redir,chardev=usbredirchardev%s,id=usbredirdev%s,debug=3" % (i,i))

				# Putting all together just for log.
				cmndargs = " ".join(qemuargs)
				logging.debug("QEMU COMMAND: %s %s" % (KVM, cmndargs))
				

				# Running qemu command.
				if subprocess.call([KVM] + qemuargs) == 0:
					return "OK: Started"
				else:
					return "ERR: Can not start VM"

			else:
				return "ERR: Can not find VM"

			cursor.close ()
			con.close ()
		
		

if __name__ == "__main__":
	minhas_vms = Vms()
	minhas_vms._VarSaida=True
	t = Thread(target=minhas_vms.Monitor, kwargs=dict())
	t.start()
	
	Socket = socket.socket ()
	Socket.bind ( ( '', port ) )
	Socket.listen(5)
	if sslversion == 'SSLv1': 
		ssl_type=ssl.PROTOCOL_SSLv1
	elif sslversion == 'SSLv2': 
		ssl_type=ssl.PROTOCOL_SSLv2
	elif sslversion == 'SSLv23': 
		ssl_type=ssl.PROTOCOL_SSLv23
	elif sslversion == 'TLSv1': 
		ssl_type=ssl.PROTOCOL_TLSv1
	

	file_descriptor = Socket.fileno()
	flags = fcntl.fcntl(file_descriptor, fcntl.F_GETFD)
	fcntl.fcntl(file_descriptor, fcntl.F_SETFD, flags | fcntl.FD_CLOEXEC)
	
	while True:
		newsocket, client = Socket.accept()
		try:
			connstream = ssl.wrap_socket(newsocket,
				server_side=True,
				certfile=certfile,
				keyfile=keyfile,
				ssl_version=ssl_type
				)
			data = connstream.read()	
			if len(data.split()) > 2:
				if data.split()[0] == "AUTH":
					if data.split()[1] == "IP":
						ip = data.split()[2]
						result = minhas_vms.SetTokenAuthIp(dbhost, dbname, dbuser, dbpass, ip)
						if result != "ERR":
							connstream.write("OK: "+result)
						else:
							connstream.write("ERR: Can not set IP token")
					else:
						user = data.split()[1]	
						password = data.split()[2]	
						result = minhas_vms.Auth(ldaphost, user, password, baseDN)
						if result == "OK: Auth successful":
							result = minhas_vms.SetTokenAuth(dbhost, dbname, dbuser, dbpass, user)
							if result != "ERR":
								connstream.write("OK: "+result)
							else:
								connstream.write('ERR: Can not set token')
				        	else:
				                	connstream.write(result)
			
			
				if data.split()[0] == "SEARCH":
					if data.split()[1] == "IP":
	                                        ip = data.split()[2]
	                                        token = data.split()[3]
						result = minhas_vms.AuthTokenIp(dbhost, dbname, dbuser, dbpass, ip, token) 
						if result != "ERR":
							result = minhas_vms.SearchIp(dbhost, dbname, dbuser, dbpass, ip)
	                                                if result:
	                                                        connstream.write(result)
	                                                else:
	                                                        connstream.write('ERR: Can not search')
	                                        else:
	                                                connstream.write('ERR: Can not token')
					else:
						user = data.split()[1]	
						token = data.split()[2]	
						result = minhas_vms.AuthToken(dbhost, dbname, dbuser, dbpass, user, token)
						if result != "ERR":  
							result = minhas_vms.Search(dbhost, dbname, dbuser, dbpass, user)
							if result:
				                		connstream.write(result)
				        		else:
				                		connstream.write('ERR: Can not search')
						else:
							connstream.write('ERR: Can not token')
			
				elif data.split()[0] == "KILL":
	                                if data.split()[1] == "IP":
	                                        vmname = data.split()[2]
	                                        token = data.split()[3]
						result = minhas_vms.AuthTokenIp(dbhost, dbname, dbuser, dbpass, ip, token)
						if result != "ERR":  
							result = minhas_vms.Kill(dbhost, dbname, dbuser, dbpass, vmname)
							if result:
				                		connstream.write(result)
				        		else:
				                		connstream.write('ERR: Can not start')
						else:
							connstream.write('ERR: Can not token')
	
					else:
						vmname = data.split()[1]	
						token = data.split()[2]	
						result = minhas_vms.AuthToken(dbhost, dbname, dbuser, dbpass, user, token)
						if result != "ERR":  
							result = minhas_vms.Kill(dbhost, dbname, dbuser, dbpass, vmname)
							if result:
				                		connstream.write(result)
				        		else:
				                		connstream.write('ERR: Can not start')
						else:
							connstream.write('ERR: Can not token')
			
				elif data.split()[0] == "START":
	                                if data.split()[1] == "IP":
	                                        vmname = data.split()[2]
	                                        token = data.split()[3]
						result = minhas_vms.AuthTokenIp(dbhost, dbname, dbuser, dbpass, ip, token)
						if result != "ERR":  
							result = minhas_vms.Start(dbhost, dbname, dbuser, dbpass, vmname, video_end_port, mac_oui)
							if result:
				                		connstream.write(result)
				        		else:
				                		connstream.write('ERR: Can not start')
						else:
							connstream.write('ERR: Can not token')
	
					else:
						vmname = data.split()[1]	
						token = data.split()[2]	
						result = minhas_vms.AuthToken(dbhost, dbname, dbuser, dbpass, user, token)
						if result != "ERR":  
							result = minhas_vms.Start(dbhost, dbname, dbuser, dbpass, vmname, video_end_port, mac_oui)
							if result:
				                		connstream.write(result)
				        		else:
				                		connstream.write('ERR: Can not start')
						else:
							connstream.write('ERR: Can not token')
			
				elif data.split()[0] == "STATUS":
					try:
						if data.split()[1] == "IP":
		                                        vmname = data.split()[2]
		                                        token = data.split()[3]
		                                        result = minhas_vms.AuthTokenIp(dbhost, dbname, dbuser, dbpass, ip, token)
							if result != "ERR":
								result = minhas_vms.StatusIp(dbhost, dbname, dbuser, dbpass,  vmname)
		                                                if result:
		                                                        connstream.write(result)
		                                                else:
		                                                        connstream.write('ERR: Can not get status')
							else:
								connstream.write('ERR: Can not token')
		
						else:
							vmname = data.split()[1]	
							token = data.split()[2]	
							result = minhas_vms.AuthToken(dbhost, dbname, dbuser, dbpass, user, token)
							if result != "ERR":  
								result,Smp,Mem,Video,Bits,Os = minhas_vms.Status(dbhost, dbname, dbuser, dbpass, vmname)
								if result:
					                		connstream.write('%s %s %s %s %s %s' % (result,Smp,Mem,Video,Bits,Os))
					        		else:
					                		connstream.write('ERR: Can not get status')
							else:
								connstream.write('ERR: Can not token')
					except:
						logging.exception("Connection lost trying to get STATUS.")
						connstream.write('ERR: Lost session')
			
				elif data.split()[0] == "CONNECT":
					if data.split()[1] == "IP":
	                                        vmname = data.split()[2]
	                                        token = data.split()[3]
	                                        result = minhas_vms.AuthTokenIp(dbhost, dbname, dbuser, dbpass, ip, token)
	                                        if result != "ERR":
							result = minhas_vms.Connect(dbhost, dbname, dbuser, dbpass, vmname)
	                                                if result:
	                                                        connstream.write(result[0][0]+" "+result[0][1]+" "+result[0][2])
	                                                else:
	                                                        Socket.sendto ( 'ERR: Can not connect' )
						else:
							connstream.write('ERR: Can not token')
					else:
						vmname = data.split()[1]	
						token = data.split()[2]	
						result = minhas_vms.AuthToken(dbhost, dbname, dbuser, dbpass, user, token)
						if result != "ERR":  
							result = minhas_vms.Connect(dbhost, dbname, dbuser, dbpass, vmname)
							if result:
	                                                        connstream.write(result[0][0]+" "+result[0][1]+" "+result[0][2])
				        		else:
				                		Socket.sendto ( 'ERR: Can not connect' )
						else:
							connstream.write('ERR: Can not token')
			else:
				connstream.write('ERR: Not enough parameters')	

			connstream.close() 

		except:
			logging.exception("Connection failure.")
			print sys.exc_info()


	signal.signal(signal.SIGTERM, minhas_vms.sigterm_handler, Socket)
	signal.signal(signal.SIGINT, minhas_vms.sigint_handler, Socket)
